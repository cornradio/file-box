<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <link rel="icon" href="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Pasteboard</title>
    <style>
        select{
            position: fixed;
            top: 0;
            left: 0;
            opacity: 0;
            transition: .3s;

        }
        select:hover{
            opacity: 0.8;
        }
        #selectOldFile.dark-mode{
            color: #fff;
            background-color: #2d2d2d;
            border: none;
        }
        body {
            font-family: Arial, sans-serif;
            background-color: #f3f3f3;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            transition: background-color 0.5s;
        }

        body.dark-mode {
            background-color: #2d2d2d;
            color: #fff;
        }

        textarea {
            width: 80%;
            height: 60vh;
            font-size: 14px;
            padding: 10px;
            border: 1px solid #fff;
            border-radius: 5px;
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            resize: none;
            transition: background-color 0.5s;
            font-family: 'cascadia mono', 'ÂæÆËΩØÈõÖÈªë' ,monospace;
            transition: .2s;

        }

        textarea.big {
            width: 130%;
            height: 90vh;
            font-size: 14px;
            transform: translateX(35%);
            padding: 1em;
        }


        textarea.dark-mode {
            background-color: #444;
            color: #fff;
            border: 1px solid #555;
        }

        textarea:focus,
        input:focus {
            outline: none;
        }

        /* ::selection {
            background-color: rgba(0, 0, 0, 0.8);
            color: #00ffee;
        } */

        /* flex box */
        .buttons-box,
        .textarea-box {
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .bigflexbox {
            width: 100%;
            display: flex;
            flex-direction: row;
        }

        /* Media query for screens smaller than 480px */
        @media (max-width: 600px) {
            .bigflexbox {
                display: flex;
                flex-direction: column;
            }
            .buttons-box {
                width: 100%;
                display: flex;
            }
            .hidden_on_iphone{
                display: none;
            }

            textarea {
                height: 55vh;
            }
        }

        /* buttons */
        button {
            margin-top: 8px;
            border: transparent solid 1px;
            background-color: transparent;
            display: list-item;
            color: #666;
        }
        /* button hover float hover box */
        button:hover i{
            display: inline-block;
        }
        button i {
            display: none;
        }

        input {
            font-family: 'cascadia mono', 'Courier New', Courier, monospace;
            margin-top: 10px;
            border: transparent solid 1px;
            font-size: x-large;
            background-color: transparent;
            display: list-item;
            text-align: center;
            color: #666;
        }


        button:active {
            background-color: #7a7a7a49;
        }

        button.dark-mode {
            border-color: #fff;
        }

        /* toast */
        #toastContainer {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 9999;
            transition: all 0.3s ease-in-out;
        }

        .toast {
            background-color: #f1f1f1;
            border: 1px solid #afafaf;
            color: #000000;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            font-size: smaller;
            padding: 5px 10px;
            border-radius: 100px;
            margin-bottom: 10px;
            opacity: 0;
            animation: float-in 0.3s ease-in-out;
            /* transition: 0.3s ease-in-out; */
        }

        .toast.dark-mode {
            background-color: #444;
            border: 1px solid #2d2d2d;
            color: #d8d8d8;
        }

        .toast.show {
            opacity: 0.8;
        }

        .toast.hide {
            animation: slide-out 0.5s ease-in-out;
        }

        /* scroll bar css */
        ::-webkit-scrollbar {
            width: 8px;
            height: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #00000030;
            border-radius: 999px;
            border: 1px solid #ececec59;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #000000;
        }

        @keyframes float-in {
            0% {
                transform: translateY(20px);
            }

            100% {
                transform: translateY(0);
            }
        }

        @keyframes slide-out {
            0% {
                transform: translateY(0);
            }

            100% {
                transform: translateY(-20px);
                opacity: 0;
            }
        }
    </style>
</head>

<body>
    <div class="bigflexbox">
        <div class="textarea-box">
            <textarea id="fileContent" placeholder="Paste your content here..."></textarea>
        </div>
        
        <div class="buttons-box">
            <input type="text" id="fileName" placeholder="xxx.txt" value="1.txt">
            <select id="selectOldFile"></select>
            <button id="saveFile">Save <i>Ctrl + S</i></button>
            <button id="loadFile"  class="hidden_on_iphone">Load <i>Ctrl + L</i></button>
            <button id="CopyAll" onclick="CopyAll()" >Copy <i>Ctrl + shift + C</i></button>
            <button id="Share" class="" onclick="Share()">Share <i>Ctrl + shift + S</i></button>
            <button id="toggleMode">Dark Mode <i>Ctrl + B</i></button>
        </div>

        <div id="toastContainer"></div>


    </div>

    <script>
        //Ëé∑ÂèñÂΩìÂâçurl
        var url = window.location.href;
        //ÊèêÂèñurlÁöÑip
        var ip = url.split('/')[2].split('/')[0].split(':')[0];
        console.log("‰ªé url Ëé∑ÂèñÊúçÂä°Âô® ip: " + ip)
        apiserver = ip
        port = '3000' //Á´ØÂè£Âè∑ÈªòËÆ§3000

        fetch('apiport.txt')
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('apiport.txt not found');
                }
            })
            .then(myport => {
                port = `${myport}`;
                console.log('apiport.txt -- use api port:' + port);
            })
            .catch(error => {
                console.log('apiport.txt notfound -- use defult port: 3000 ;');
            });

        const toggleButton = document.getElementById('toggleMode');
        toggleButton.addEventListener('click', function () {
            toggleDarkMode();
            saveDarkMode();
        });
        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
            document.getElementById('fileContent').classList.toggle('dark-mode');
            document.getElementById('selectOldFile').classList.toggle('dark-mode');
        }
        function saveDarkMode() {
            var darkMode = document.body.classList.contains('dark-mode');
            localStorage.setItem('darkMode', darkMode);
            console.log('Dark mode saved to localStorage: ' + darkMode);
        }
        function toggleBigMode() {
            document.getElementById('fileContent').classList.toggle('big');
        }
        function CopyAll() {
            document.getElementById('fileContent').select();
            document.execCommand('copy');
            showToast('üìã Copied All', document.body.classList.contains('dark-mode'));
        }
        function Share(){
            var shareurl = window.location.href.split('?txt=')[0] + '?txt=' + document.getElementById('fileName').value.split('.')[0];
            console.log('ÂàÜ‰∫´ÈìæÊé•: ' + shareurl);
            // if http no s
            if (window.location.href.split('/')[0] == 'http:'){
                showToast('üîó F12 to copy :', document.body.classList.contains('dark-mode'));
                // alert with copy button
                prompt("Copy this and Share!", shareurl);
                // prompt(shareurl + '\nyou can also see this link in console (F12)');
            }
            else{
                navigator.clipboard.writeText(shareurl);
                showToast('üîó Copied', document.body.classList.contains('dark-mode'));
            }
            // for iphone safari , this button will be hidden
        }


        const saveButton = document.getElementById('saveFile');
        saveButton.addEventListener('click', function () {
            const fileName = document.getElementById('fileName').value;
            const content = document.getElementById('fileContent').value;

            const data = {
                content: content
            };

            fetch(`http://${apiserver}:${port}/api/writefile/${fileName}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (response.ok) {
                        console.log('Êñá‰ª∂ÂÜÖÂÆπÂ∑≤ÊàêÂäü‰øùÂ≠ò');
                        showToast('üíæ Save ok', document.body.classList.contains('dark-mode'));
                    } else {
                        console.error('‰øùÂ≠òÊñá‰ª∂ÂÜÖÂÆπÊó∂Âá∫Èîô');
                    }
                })
                .catch(error => {
                    showToast('‚ò†Ô∏è API dead', document.body.classList.contains('dark-mode'));// Toast match dark mode
                });
        });

        const loadButton = document.getElementById('loadFile');
        loadButton.addEventListener('click', function () {
            const fileName = document.getElementById('fileName').value;
            load(fileName);
        });

        function load(txtname) {
            fetch('http://' + apiserver + `:${port}/api/readfile/` + txtname)
                .then(response => response.text())
                .then(data => {
                    // If the file is not found, show a toast and return
                    if (data == 'file not found') {
                        showToast('‚õî File not found', document.body.classList.contains('dark-mode'));
                        document.getElementById('fileContent').value = '';
                        return;
                    }
                    // Display the content in the textarea
                    document.getElementById('fileContent').value = data;

                    showToast('‚ôªÔ∏è Load ok', document.body.classList.contains('dark-mode'));// Toast match dark mode
                })
                .catch(error => {
                    showToast('‚ò†Ô∏è API dead', document.body.classList.contains('dark-mode'));// Toast match dark mode
                });
            loadOldFileList();
        }

        // Keyboard event listener 
        document.addEventListener('keydown', function (event) {
            if (event.ctrlKey && event.key === 'b') {
                event.preventDefault();
                toggleDarkMode();
            }
            if (event.ctrlKey && event.key === 's') {
                event.preventDefault();
                saveButton.click();
            }
            if (event.ctrlKey && event.key === 'l') {
                event.preventDefault();
                loadButton.click();
            }
            if (event.key === 'F11') {
                event.preventDefault();
                toggleBigMode();
            }
            //savebutton
            if (event.ctrlKey && event.shiftKey && event.key === 'C') {
                event.preventDefault();
                CopyAll();
            }
            //sharebutton
            if (event.ctrlKey && event.shiftKey && event.key === 'S') {
                event.preventDefault();
                Share();
            }
        });
        function loadEmojiIcon(curEmoji) {
            //Â∞ÜÁΩëÈ°µÂõæÊ†áÊîπÊàêemoji curEmoji
            const favicon = document.querySelector('link[rel="icon"]');
            // favicon.href = `https://www.emojiall.com/en/header-svg/${curEmoji}.svg`;
            favicon.href = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${curEmoji}</text></svg>`;
        }

        // Toast
        function showToast(textContent, darkMode) {
            var toast = document.createElement('div');// ÂàõÂª∫ToastÂÖÉÁ¥†
            toast.classList.add('toast');
            toast.textContent = textContent;

            var container = document.getElementById('toastContainer');// Â∞ÜToastÊ∑ªÂä†Âà∞ÂÆπÂô®‰∏≠
            container.appendChild(toast);

            if (darkMode) {
                toast.classList.toggle('dark-mode');// ËÆæÁΩÆÊ∑±Ëâ≤Ê®°Âºè
            }

            setTimeout(function () {// ÊòæÁ§∫Toast
                toast.classList.add('show');
            }, 30);

            setTimeout(function () {// ÈöêËóèToast
                toast.classList.add('hide');
                setTimeout(function () {
                    container.removeChild(toast);
                }, 300);
            }, 1000);
        }
        // onchange Ëá™Âä®‰øùÂ≠òÊñá‰ª∂ÂêçÊ°Ü Âà∞ localStorage Âπ∂‰∏îÂä†ËΩΩÂÆÉ
        var fileNameInput = document.getElementById('fileName');
        fileNameInput.onchange = function () {
            // Ëá™Âä®Ë°•ÂÖ® txt ÂêéÁºÄ
            var fileName = fileNameInput.value;
            if (!fileName.includes('.txt')) {
                fileName = fileName + '.txt';
                document.getElementById('fileName').value = fileName;
            }
            localStorage.setItem('fileName', fileName);
            //Â∞ÜÊñá‰ª∂ÂêçÊ∑ªÂä†Âà∞ local storage ÂéÜÂè≤Êñá‰ª∂Âêçlist ,
            var oldFileList = localStorage.getItem('oldFileList');
            if (oldFileList) {
                oldFileList = oldFileList.split(',');
                if (!oldFileList.includes(fileName)) {
                    oldFileList.push(fileName);
                    localStorage.setItem('oldFileList', oldFileList);
                }
            } else {
                localStorage.setItem('oldFileList', fileName);
            }
            
            console.log('Êñá‰ª∂ÂÜÖÂÆπÂ∑≤Â≠òÂÇ®Âà∞ localStorage: ' + fileName);
            load(fileName)
        };

        //Âä†ËΩΩÂéÜÂè≤Êñá‰ª∂Âêçlist , ‰ªé local storyage
        function loadOldFileList() {
            //clearOldFileList
            document.getElementById('selectOldFile').innerHTML = '';
            var fileName = document.getElementById('selectOldFile').value;
            var storedOldFileList = localStorage.getItem('oldFileList');

            var first_option = document.createElement('option');
                    first_option.value = 'History';
                    first_option.text = 'üìã History';
                    document.getElementById('selectOldFile').appendChild(first_option);
            var second_option = document.createElement('option');
                    second_option.value = 'ClearAll';
                    second_option.text = 'üóë ClearAll';
                    document.getElementById('selectOldFile').appendChild(second_option);
            

            // console.log('‰ªé localStorage Âä†ËΩΩÂéÜÂè≤Êñá‰ª∂Âêç: ' + storedOldFileList);
            if (storedOldFileList) {
                var oldFileList = storedOldFileList.split(',');
                for (var i = 0; i < oldFileList.length; i++) {
                    var option = document.createElement('option');
                    option.value = oldFileList[i];
                    option.text = oldFileList[i];
                    document.getElementById('selectOldFile').appendChild(option);
                }
            }
            //select the current file
            // let fileName = document.getElementById('fileName').value;
            // document.getElementById('selectOldFile').value = fileName;
        }
        //ÈÄâÊã©ÂéÜÂè≤Êñá‰ª∂ÂêçÊó∂ÔºåÂä†ËΩΩÊñá‰ª∂ÂÜÖÂÆπ
        let selectOldFile = document.getElementById('selectOldFile');
        selectOldFile.onchange =  function () {
            if (this.value == 'ClearAll') {
                localStorage.clear();
                console.log('localStorage Â∑≤Ê∏ÖÁ©∫');
                showToast('üóëÔ∏è ClearAll', document.body.classList.contains('dark-mode'));
                document.location.reload();
                return;
            }
            document.getElementById('fileName').value = this.value;
            localStorage.setItem('fileName', this.value);
            load(this.value);
        };
        // È°µÈù¢Âä†ËΩΩÊó∂ 
        window.onload = function () {
            //Â¶ÇÊûúÂ≠òÂú®urlparm txtÂèÇÊï∞Ôºå‰ºòÂÖàÂä†ËΩΩ
            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
		    var txtParm = urlParams.get('txt');
            var storedFileContent = '';
            if (txtParm) {
                storedFileContent = txtParm + '.txt';
                console.log('‰ªé txt urlParm Âä†ËΩΩÊñá‰ª∂Âêç: ' + storedFileContent);
                //ËÆæÁΩÆtitle
                document.title = storedFileContent;
            }
            else{
                storedFileContent = localStorage.getItem('fileName');
            }
            //Âä†ËΩΩÊñá‰ª∂ÂêçÊ°Ü
            if (storedFileContent) {
                fileNameInput.value = storedFileContent;
                console.log('‰ªé localStorage Âä†ËΩΩÊñá‰ª∂Âêç: ' + storedFileContent);
            }
            

            load(fileName.value)
            //Âä†ËΩΩÊöóÈªëÊ®°Âºè
            var storedDarkMode = localStorage.getItem('darkMode');
            console.log('‰ªé localStorage Âä†ËΩΩÊöóÈªëÊ®°Âºè: ' + storedDarkMode);
            if (storedDarkMode == 'true') {
                toggleDarkMode();
            }
            loadEmojiIcon('üìã')
        };
    </script>
</body>

</html>